{"version":3,"file":"utils-CNBB1jrL.js","names":[],"sources":["../../src/utils/index.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\n/**\r\n * Format currency to Malaysian Ringgit\r\n */\r\nexport function formatMYR(amount: number): string {\r\n  return new Intl.NumberFormat('ms-MY', {\r\n    style: 'currency',\r\n    currency: 'MYR',\r\n    minimumFractionDigits: 2,\r\n  }).format(amount)\r\n}\r\n\r\n/**\r\n * Format date to Malaysian format (DD/MM/YYYY)\r\n */\r\nexport function formatDateMY(date: Date | string): string {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date\r\n  return new Intl.DateTimeFormat('en-GB', {\r\n    day: '2-digit',\r\n    month: '2-digit',\r\n    year: 'numeric',\r\n  }).format(dateObj)\r\n}\r\n\r\n/**\r\n * Calculate SST (Sales and Service Tax) - 6%\r\n */\r\nexport function calculateSST(amount: number): number {\r\n  return amount * 0.06\r\n}\r\n\r\n/**\r\n * Calculate GST (for historical data) - 6%\r\n */\r\nexport function calculateGST(amount: number): number {\r\n  return amount * 0.06\r\n}\r\n\r\n/**\r\n * Validate Malaysian tax identification number format\r\n */\r\nexport function validateMalaysianTaxNo(taxNo: string): boolean {\r\n  // Basic validation for Malaysian tax number format\r\n  const taxRegex = /^[A-Z0-9]{10,20}$/\r\n  return taxRegex.test(taxNo.toUpperCase())\r\n}\r\n\r\n/**\r\n * Generate invoice number in Malaysian format\r\n */\r\nexport function generateInvoiceNumber(prefix: string = 'INV'): string {\r\n  const date = new Date()\r\n  const year = date.getFullYear()\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0')\r\n  const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0')\r\n  return `${prefix}${year}${month}${random}`\r\n}\r\n\r\n/**\r\n * Format Malaysian business registration number\r\n */\r\nexport function formatSSMNumber(ssmNo: string): string {\r\n  // Format: 201501026187 (YYYYXXXXXXXD)\r\n  return ssmNo.replace(/(\\d{4})(\\d{8})(\\d)/, '$1-$2-$3')\r\n}"],"mappings":"AAUA,SAAgB,EAAU,EAAwB,CAChD,OAAO,IAAI,KAAK,aAAa,QAAS,CACpC,MAAO,WACP,SAAU,MACV,sBAAuB,EACxB,CAAC,CAAC,OAAO,EAAO"}