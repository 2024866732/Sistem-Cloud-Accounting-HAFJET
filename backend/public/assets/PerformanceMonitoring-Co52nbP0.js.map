{"version":3,"file":"PerformanceMonitoring-Co52nbP0.js","names":["PerformanceMonitoring: React.FC"],"sources":["../../src/utils/cache.ts","../../src/pages/PerformanceMonitoring.tsx"],"sourcesContent":["// Advanced caching strategy for HAFJET Cloud Accounting System\r\nclass CacheManager {\r\n  private cache: Map<string, { data: unknown; timestamp: number; ttl: number }>;\r\n  private maxSize: number;\r\n\r\n  constructor(maxSize = 100) {\r\n    this.cache = new Map();\r\n    this.maxSize = maxSize;\r\n  }\r\n\r\n  // Set cache with TTL (time to live) in milliseconds\r\n  set(key: string, data: unknown, ttl = 300000): void { // 5 minutes default\r\n    // Remove oldest entries if cache is full\r\n    if (this.cache.size >= this.maxSize) {\r\n      const firstKey = this.cache.keys().next().value;\r\n      if (firstKey) {\r\n        this.cache.delete(firstKey);\r\n      }\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n  }\r\n\r\n  // Get cached data if not expired\r\n  get(key: string): unknown | null {\r\n    const cached = this.cache.get(key);\r\n    \r\n    if (!cached) {\r\n      return null;\r\n    }\r\n\r\n    // Check if expired\r\n    if (Date.now() - cached.timestamp > cached.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return cached.data;\r\n  }\r\n\r\n  // Check if key exists and is valid\r\n  has(key: string): boolean {\r\n    return this.get(key) !== null;\r\n  }\r\n\r\n  // Remove specific key\r\n  delete(key: string): void {\r\n    this.cache.delete(key);\r\n  }\r\n\r\n  // Clear all cache\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  // Get cache statistics\r\n  getStats(): { size: number; maxSize: number; hitRate: number } {\r\n    return {\r\n      size: this.cache.size,\r\n      maxSize: this.maxSize,\r\n      hitRate: 0 // Would need to implement hit tracking for accurate rate\r\n    };\r\n  }\r\n}\r\n\r\n// Global cache instances\r\nexport const apiCache = new CacheManager(50);\r\nexport const componentCache = new CacheManager(30);\r\nexport const userDataCache = new CacheManager(20);\r\n\r\n// API response caching wrapper\r\nexport const cachedApiCall = async <T>(\r\n  key: string,\r\n  apiCall: () => Promise<T>,\r\n  ttl = 300000\r\n): Promise<T> => {\r\n  // Check cache first\r\n  const cached = apiCache.get(key) as T;\r\n  if (cached) {\r\n    console.log(`🎯 Cache hit: ${key}`);\r\n    return cached;\r\n  }\r\n\r\n  console.log(`🌐 API call: ${key}`);\r\n  try {\r\n    const result = await apiCall();\r\n    apiCache.set(key, result, ttl);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(`API call failed for ${key}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Local storage wrapper with compression\r\nexport const localStorage = {\r\n  setItem: (key: string, value: unknown): void => {\r\n    try {\r\n      const compressed = JSON.stringify(value);\r\n      window.localStorage.setItem(key, compressed);\r\n    } catch (error) {\r\n      console.error('Failed to set localStorage item:', error);\r\n    }\r\n  },\r\n\r\n  getItem: (key: string): unknown | null => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : null;\r\n    } catch (error) {\r\n      console.error('Failed to get localStorage item:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  removeItem: (key: string): void => {\r\n    try {\r\n      window.localStorage.removeItem(key);\r\n    } catch (error) {\r\n      console.error('Failed to remove localStorage item:', error);\r\n    }\r\n  },\r\n\r\n  clear: (): void => {\r\n    try {\r\n      window.localStorage.clear();\r\n    } catch (error) {\r\n      console.error('Failed to clear localStorage:', error);\r\n    }\r\n  }\r\n};\r\n\r\n// Session storage wrapper\r\nexport const sessionStorage = {\r\n  setItem: (key: string, value: unknown): void => {\r\n    try {\r\n      window.sessionStorage.setItem(key, JSON.stringify(value));\r\n    } catch (error) {\r\n      console.error('Failed to set sessionStorage item:', error);\r\n    }\r\n  },\r\n\r\n  getItem: (key: string): unknown | null => {\r\n    try {\r\n      const item = window.sessionStorage.getItem(key);\r\n      return item ? JSON.parse(item) : null;\r\n    } catch (error) {\r\n      console.error('Failed to get sessionStorage item:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  removeItem: (key: string): void => {\r\n    try {\r\n      window.sessionStorage.removeItem(key);\r\n    } catch (error) {\r\n      console.error('Failed to remove sessionStorage item:', error);\r\n    }\r\n  },\r\n\r\n  clear: (): void => {\r\n    try {\r\n      window.sessionStorage.clear();\r\n    } catch (error) {\r\n      console.error('Failed to clear sessionStorage:', error);\r\n    }\r\n  }\r\n};\r\n\r\n// Cache invalidation strategies\r\nexport const invalidateCache = {\r\n  // Invalidate user-specific data\r\n  user: (): void => {\r\n    userDataCache.clear();\r\n    apiCache.delete('user-profile');\r\n    apiCache.delete('user-settings');\r\n    localStorage.removeItem('user-preferences');\r\n  },\r\n\r\n  // Invalidate financial data\r\n  financial: (): void => {\r\n    apiCache.delete('dashboard-data');\r\n    apiCache.delete('transactions');\r\n    apiCache.delete('invoices');\r\n    apiCache.delete('reports');\r\n  },\r\n\r\n  // Invalidate all caches\r\n  all: (): void => {\r\n    apiCache.clear();\r\n    componentCache.clear();\r\n    userDataCache.clear();\r\n    localStorage.clear();\r\n    sessionStorage.clear();\r\n  }\r\n};\r\n\r\n// Performance monitoring for cache\r\nexport const cacheMetrics = {\r\n  logHit: (key: string): void => {\r\n    console.log(`✅ Cache hit: ${key}`);\r\n  },\r\n\r\n  logMiss: (key: string): void => {\r\n    console.log(`❌ Cache miss: ${key}`);\r\n  },\r\n\r\n  getOverallStats: () => {\r\n    return {\r\n      api: apiCache.getStats(),\r\n      component: componentCache.getStats(),\r\n      userData: userDataCache.getStats()\r\n    };\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Activity, Clock, Database, Cpu, TrendingUp, AlertTriangle, CheckCircle, XCircle } from 'lucide-react';\r\nimport { getPerformanceMetrics, clearPerformanceData } from '../utils/performance';\r\nimport { cacheMetrics } from '../utils/cache';\r\n\r\ninterface PerformanceMetric {\r\n  component: string;\r\n  loadTime: number;\r\n  timestamp: string;\r\n}\r\n\r\ninterface SystemHealth {\r\n  status: 'healthy' | 'warning' | 'critical';\r\n  uptime: string;\r\n  responseTime: number;\r\n  errorRate: number;\r\n}\r\n\r\nconst PerformanceMonitoring: React.FC = () => {\r\n  const [metrics, setMetrics] = useState<PerformanceMetric[]>([]);\r\n  const [systemHealth, setSystemHealth] = useState<SystemHealth>({\r\n    status: 'healthy',\r\n    uptime: '99.9%',\r\n    responseTime: 150,\r\n    errorRate: 0.1\r\n  });\r\n  const [refreshInterval, setRefreshInterval] = useState(5000);\r\n\r\n  useEffect(() => {\r\n    loadMetrics();\r\n    const interval = setInterval(loadMetrics, refreshInterval);\r\n    return () => clearInterval(interval);\r\n  }, [refreshInterval]);\r\n\r\n  const loadMetrics = () => {\r\n    const performanceData = getPerformanceMetrics();\r\n    setMetrics(performanceData.slice(-50)); // Keep last 50 entries\r\n    \r\n    // Simulate system health check\r\n    const avgLoadTime = performanceData.length > 0 \r\n      ? performanceData.reduce((sum: number, m: PerformanceMetric) => sum + m.loadTime, 0) / performanceData.length \r\n      : 0;\r\n    \r\n    setSystemHealth(prev => ({\r\n      ...prev,\r\n      responseTime: Math.round(avgLoadTime),\r\n      status: avgLoadTime > 3000 ? 'critical' : avgLoadTime > 1000 ? 'warning' : 'healthy'\r\n    }));\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'healthy': return 'text-green-600 bg-green-100';\r\n      case 'warning': return 'text-yellow-600 bg-yellow-100';\r\n      case 'critical': return 'text-red-600 bg-red-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'healthy': return <CheckCircle className=\"w-5 h-5\" />;\r\n      case 'warning': return <AlertTriangle className=\"w-5 h-5\" />;\r\n      case 'critical': return <XCircle className=\"w-5 h-5\" />;\r\n      default: return <Activity className=\"w-5 h-5\" />;\r\n    }\r\n  };\r\n\r\n  const avgLoadTime = metrics.length > 0 \r\n    ? Math.round(metrics.reduce((sum: number, m: PerformanceMetric) => sum + m.loadTime, 0) / metrics.length) \r\n    : 0;\r\n\r\n  const cacheStats = cacheMetrics.getOverallStats();\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 p-6\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Performance Monitoring</h1>\r\n          <p className=\"text-gray-600\">Real-time performance metrics and system health monitoring</p>\r\n        </div>\r\n\r\n        {/* System Health Overview */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">System Status</p>\r\n                <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium mt-1 ${getStatusColor(systemHealth.status)}`}>\r\n                  {getStatusIcon(systemHealth.status)}\r\n                  <span className=\"ml-1 capitalize\">{systemHealth.status}</span>\r\n                </div>\r\n              </div>\r\n              <Activity className=\"w-8 h-8 text-blue-600\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Avg Response Time</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{systemHealth.responseTime}ms</p>\r\n              </div>\r\n              <Clock className=\"w-8 h-8 text-green-600\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Uptime</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{systemHealth.uptime}</p>\r\n              </div>\r\n              <TrendingUp className=\"w-8 h-8 text-purple-600\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-600\">Error Rate</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{systemHealth.errorRate}%</p>\r\n              </div>\r\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance Metrics */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\r\n          {/* Component Load Times */}\r\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h2 className=\"text-lg font-semibold text-gray-900\">Component Load Times</h2>\r\n              <Cpu className=\"w-5 h-5 text-gray-400\" />\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              {metrics.slice(-10).map((metric, index) => (\r\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                  <div>\r\n                    <p className=\"font-medium text-gray-900\">{metric.component}</p>\r\n                    <p className=\"text-sm text-gray-500\">{new Date(metric.timestamp).toLocaleTimeString()}</p>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <span className={`font-bold ${metric.loadTime > 1000 ? 'text-red-600' : metric.loadTime > 500 ? 'text-yellow-600' : 'text-green-600'}`}>\r\n                      {metric.loadTime.toFixed(0)}ms\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Cache Performance */}\r\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h2 className=\"text-lg font-semibold text-gray-900\">Cache Performance</h2>\r\n              <Database className=\"w-5 h-5 text-gray-400\" />\r\n            </div>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\r\n                <span className=\"text-gray-700\">API Cache</span>\r\n                <span className=\"font-bold text-blue-600\">{cacheStats.api.size}/{cacheStats.api.maxSize}</span>\r\n              </div>\r\n              <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\r\n                <span className=\"text-gray-700\">Component Cache</span>\r\n                <span className=\"font-bold text-green-600\">{cacheStats.component.size}/{cacheStats.component.maxSize}</span>\r\n              </div>\r\n              <div className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\r\n                <span className=\"text-gray-700\">User Data Cache</span>\r\n                <span className=\"font-bold text-purple-600\">{cacheStats.userData.size}/{cacheStats.userData.maxSize}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance Analytics */}\r\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100 mb-8\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900\">Performance Analytics</h2>\r\n            <div className=\"flex space-x-2\">\r\n              <select\r\n                value={refreshInterval}\r\n                onChange={(e) => setRefreshInterval(Number(e.target.value))}\r\n                className=\"px-3 py-1 border border-gray-300 rounded-md text-sm\"\r\n              >\r\n                <option value={1000}>1s</option>\r\n                <option value={5000}>5s</option>\r\n                <option value={10000}>10s</option>\r\n                <option value={30000}>30s</option>\r\n              </select>\r\n              <button\r\n                onClick={() => {\r\n                  clearPerformanceData();\r\n                  setMetrics([]);\r\n                }}\r\n                className=\"px-3 py-1 bg-red-600 text-white rounded-md text-sm hover:bg-red-700\"\r\n              >\r\n                Clear Data\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\r\n              <p className=\"text-2xl font-bold text-blue-600\">{metrics.length}</p>\r\n              <p className=\"text-sm text-gray-600\">Total Measurements</p>\r\n            </div>\r\n            <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\r\n              <p className=\"text-2xl font-bold text-green-600\">{avgLoadTime}ms</p>\r\n              <p className=\"text-sm text-gray-600\">Average Load Time</p>\r\n            </div>\r\n            <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\r\n              <p className=\"text-2xl font-bold text-purple-600\">{Math.max(...metrics.map(m => m.loadTime), 0).toFixed(0)}ms</p>\r\n              <p className=\"text-sm text-gray-600\">Peak Load Time</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Real-time Chart Placeholder */}\r\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-100\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance Trends</h2>\r\n          <div className=\"h-64 bg-gray-50 rounded-lg flex items-center justify-center\">\r\n            <div className=\"text-center\">\r\n              <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\r\n              <p className=\"text-gray-500\">Real-time performance chart</p>\r\n              <p className=\"text-sm text-gray-400\">Chart integration available with Chart.js</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceMonitoring;"],"mappings":"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"}