name: List Railway Services

on:
  workflow_dispatch:

jobs:
  list-services:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT: ${{ secrets.RAILWAY_PROJECT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli
          echo "✅ Railway CLI installed"
          railway --version

      - name: Check Railway Authentication
        id: auth_check
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "auth_ok=false" >> $GITHUB_OUTPUT
            echo "❌ RAILWAY_TOKEN not configured"
            exit 1
          else
            echo "auth_ok=true" >> $GITHUB_OUTPUT
            echo "✅ RAILWAY_TOKEN configured"
          fi

      - name: Get Project Status
        id: project_status
        run: |
          echo "🔍 Fetching Railway project status..."
          if railway status > project-status.txt 2>&1; then
            echo "project_ok=true" >> $GITHUB_OUTPUT
            echo "✅ Project status retrieved"
            cat project-status.txt
          else
            echo "project_ok=false" >> $GITHUB_OUTPUT
            echo "⚠️  Could not get project status"
            cat project-status.txt
          fi

      - name: List All Services
        id: list_services
        run: |
          echo "📋 Listing all services in Railway project..."
          echo "services_found=false" >> $GITHUB_OUTPUT
          
          # Try different methods to list services
          
          # Method 1: railway service list (if available)
          if railway service 2>/dev/null | tee services-list.txt; then
            if [ -s services-list.txt ]; then
              echo "services_found=true" >> $GITHUB_OUTPUT
              echo "✅ Services listed via 'railway service'"
            fi
          fi
          
          # Method 2: Parse from railway status
          if grep -i "service" project-status.txt > services-from-status.txt 2>/dev/null; then
            echo "✅ Found service info in status output"
          fi
          
          # Method 3: Try to get service list via whoami/link info
          railway whoami > whoami.txt 2>/dev/null || true
          
          echo "📦 All service discovery methods attempted"

      - name: Create Comprehensive Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            
            let projectStatus = 'Not available'
            let servicesList = 'Not available'
            let servicesFromStatus = 'Not found'
            let whoami = 'Not available'
            
            try {
              projectStatus = fs.readFileSync('project-status.txt', 'utf8')
            } catch (e) {}
            
            try {
              servicesList = fs.readFileSync('services-list.txt', 'utf8')
            } catch (e) {}
            
            try {
              servicesFromStatus = fs.readFileSync('services-from-status.txt', 'utf8')
            } catch (e) {}
            
            try {
              whoami = fs.readFileSync('whoami.txt', 'utf8')
            } catch (e) {}

            const body = [
              `## 🚂 Railway Services Discovery`,
              '',
              `**Timestamp:** ${new Date().toISOString()}`,
              `**Workflow Run:** [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              '',
              '---',
              '',
              '## 📋 Railway Project Status',
              '```',
              projectStatus.substring(0, 3000),
              '```',
              '',
              '---',
              '',
              '## 🎯 Services List',
              '',
              servicesList !== 'Not available' && servicesList.trim().length > 0
                ? '```\n' + servicesList.substring(0, 2000) + '\n```'
                : '⚠️  Could not list services directly. Check project status above for service information.',
              '',
              '---',
              '',
              '## 🔍 Services from Status Output',
              '```',
              servicesFromStatus,
              '```',
              '',
              '---',
              '',
              '## 👤 Railway User Info',
              '```',
              whoami,
              '```',
              '',
              '---',
              '',
              '## 🔧 How to Set RAILWAY_SERVICE Secret',
              '',
              '### Step 1: Identify Service Name',
              'From the outputs above, identify your service name (case-sensitive).',
              '',
              '### Step 2: Set GitHub Secret',
              '',
              '**Via GitHub CLI:**',
              '```bash',
              'gh secret set RAILWAY_SERVICE --body "your-service-name"',
              '```',
              '',
              '**Via GitHub Web:**',
              '1. Go to: Settings → Secrets and variables → Actions',
              '2. Click "New repository secret" or update existing `RAILWAY_SERVICE`',
              '3. Name: `RAILWAY_SERVICE`',
              '4. Value: Your exact service name (e.g., `backend`, `hafjet-backend`)',
              '5. Click "Add secret"',
              '',
              '### Step 3: Verify in Workflow',
              'File: `.github/workflows/deploy.yml`',
              '',
              'Ensure this line exists:',
              '```yaml',
              'RAILWAY_SERVICE: ${{ secrets.RAILWAY_SERVICE }}',
              '```',
              '',
              '### Step 4: Test Deployment',
              '```bash',
              'gh workflow run "Deploy to Railway"',
              'gh run watch',
              '```',
              '',
              '---',
              '',
              '## 📦 Artifacts',
              'Download workflow artifacts for full output files.',
              '',
              '## 🆘 Troubleshooting',
              '',
              '**If no services appear above:**',
              '1. Verify `RAILWAY_TOKEN` is valid: `railway whoami` (locally)',
              '2. Verify `RAILWAY_PROJECT` secret is set correctly',
              '3. Check Railway dashboard: https://railway.app',
              '4. Ensure at least one service exists in your Railway project',
              '',
              '**Service exists but deploy fails:**',
              '1. Double-check service name spelling (case-sensitive)',
              '2. Ensure service is active/deployed in Railway',
              '3. Try manual deploy: `railway up --service your-service-name`',
              '',
              '**Need help?**',
              'Comment on this issue with:',
              '- Railway dashboard screenshot',
              '- Service names you want to deploy',
              '- Error messages from failed deployments'
            ].join('\n')

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚂 Railway Services List - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['railway', 'automation', 'configuration']
            })
            
            core.info(`✅ Created issue #${issue.data.number}`)
            core.setOutput('issueNumber', issue.data.number)

      - name: Upload All Discovery Files
        uses: actions/upload-artifact@v4
        with:
          name: railway-discovery-${{ github.run_number }}
          path: |
            project-status.txt
            services-list.txt
            services-from-status.txt
            whoami.txt

      - name: Workflow Summary
        run: |
          echo "## 🚂 Railway Service Discovery Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Results:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Project status retrieved" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Service discovery attempted" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Issue created with detailed information" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Artifacts uploaded" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the created issue for service names" >> $GITHUB_STEP_SUMMARY
          echo "2. Download artifacts for raw output" >> $GITHUB_STEP_SUMMARY
          echo "3. Set \`RAILWAY_SERVICE\` secret with correct name" >> $GITHUB_STEP_SUMMARY
          echo "4. Trigger deployment workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Command to set secret:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "gh secret set RAILWAY_SERVICE --body \"your-service-name\"" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
