name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "*" ]

jobs:
  setup-and-check:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: "--health-cmd='mongosh --eval \"db.runCommand({ ping: 1 })\"' --health-interval=10s --health-timeout=5s --health-retries=5"
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache root node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install root dependencies
        run: npm ci

      - name: Backend: install & type-check
        working-directory: ./backend
        run: |
          npm ci
          # build (tsc) will run via npm run build if present; keep explicit check
          npx tsc --noEmit

      - name: Frontend: install & build
        working-directory: ./frontend
        run: |
          npm ci
          npm run build --if-present

      - name: Lint (placeholder)
        run: echo "Run lint here (add eslint step)"

      - name: Run unit tests (placeholder)
        run: echo "Run backend/unit tests here (jest/vitest)"

  docker-builds:
    runs-on: ubuntu-latest
    needs: setup-and-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend image (runtime)
        run: docker build -t hafjet-backend:ci --target runtime -f backend/Dockerfile backend

      - name: Build frontend image
        run: docker build -t hafjet-frontend:ci -f frontend/Dockerfile frontend

      - name: Optionally publish to GHCR (only on main)
        if: github.ref == 'refs/heads/main' && secrets.GHCR_TOKEN
        env:
          CR_PAT: ${{ secrets.GHCR_TOKEN }}
        run: |
          echo $CR_PAT | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag hafjet-backend:ci ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-backend:ci
          docker tag hafjet-frontend:ci ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-frontend:ci
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-backend:ci
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-frontend:ci
