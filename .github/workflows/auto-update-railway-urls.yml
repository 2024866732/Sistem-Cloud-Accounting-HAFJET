---
name: Auto Update Railway URLs (safe)

on:
  workflow_dispatch:
  # Optionally run after a successful deployment workflow (uncomment when ready)
  # workflow_run:
  #   workflows: ["Deploy to Railway"]
  #   types: [completed]


jobs:
  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          echo "Checking repository secrets..."
          # Fail early if secrets are missing - make failure explicit so CI owner can fix
          if [ -z "${{ secrets.REPO_WRITE_TOKEN }}" ]; then
            echo "❌ Error: REPO_WRITE_TOKEN not set"; exit 1
          fi
          if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "❌ Error: RAILWAY_TOKEN not set"; exit 1
          fi
          echo "All required secrets present."

  update-railway-urls:
    needs: check-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install GH CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Fetch Railway domain(s)
        id: fetch
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "(placeholder) Query Railway API to list domains/services"
          # Example: use Railway CLI or API to discover deployed domain for backend
          # For now output a placeholder domain which will be used downstream
          DOMAIN=example-backend.railway.app
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install --no-cache-dir pynacl requests

      - name: Create/Update repository secret RAILWAY_BACKEND_URL (Python)
        env:
          DOMAIN: ${{ steps.fetch.outputs.domain }}
          REPO_WRITE_TOKEN: ${{ secrets.REPO_WRITE_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 - <<'PY'
          import os, base64, requests
          from nacl import public

          repo = os.environ['GITHUB_REPOSITORY']
          owner, repo_name = repo.split('/')
          token = os.environ['REPO_WRITE_TOKEN']
          domain = os.environ.get('DOMAIN')
          backend_url = f"https://{domain}"

          headers = {'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}

          # Get the public key for the repository
          r = requests.get(f'https://api.github.com/repos/{owner}/{repo_name}/actions/secrets/public-key', headers=headers)
          r.raise_for_status()
          key_info = r.json()
          key_id = key_info['key_id']
          public_key = base64.b64decode(key_info['key'])

          # Encrypt using PyNaCl SealedBox
          pubkey = public.PublicKey(public_key)
          sealed_box = public.SealedBox(pubkey)
          encrypted = sealed_box.encrypt(backend_url.encode('utf-8'))
          encrypted_b64 = base64.b64encode(encrypted).decode('utf-8')

          payload = {'encrypted_value': encrypted_b64, 'key_id': key_id}
          put = requests.put(f'https://api.github.com/repos/{owner}/{repo_name}/actions/secrets/RAILWAY_BACKEND_URL', json=payload, headers=headers)
          put.raise_for_status()
          print('RAILWAY_BACKEND_URL secret updated via Python')
          PY

      - name: Report
        run: |
          echo "Auto-update completed. If this ran, repo secrets were updated."


