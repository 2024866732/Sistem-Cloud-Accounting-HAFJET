name: CI

on:
  push:
    branches: [main, master]
  pull_request: {}

permissions:
  contents: read
  packages: write

jobs:
  setup-and-check:
    runs-on: ubuntu-latest
    env:
      VITE_DISABLE_NOTIFICATIONS: 'true'
      SKIP_SOCKET_AUTH: 'true'
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache root node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install root dependencies
        run: npm ci

      - name: Backend - install and type-check
        working-directory: ./backend
        run: |
          npm ci --ignore-scripts
          # build (tsc) will run via npm run build if present; keep explicit check
          npx tsc --noEmit

      - name: Backend - run tests
        working-directory: ./backend
        run: |
          npm ci --ignore-scripts
          npm test

      - name: Frontend - install and build
        working-directory: ./frontend
        run: |
          npm ci --ignore-scripts
          npm run build --if-present

      - name: Lint (placeholder)
        run: echo "Run lint here (add eslint step)"

      - name: Run unit tests (placeholder)
        run: echo "Run backend/unit tests here (jest/vitest)"

  test-backup-restore-inmemory:
    runs-on: ubuntu-latest
    needs: setup-and-check
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --ignore-scripts

      - name: Install OpenSSL 1.1 compatibility library
        run: |
          wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
          sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
          rm libssl1.1_1.1.1f-1ubuntu2_amd64.deb

      - name: Run in-memory backup/restore test
        run: |
          cd backend
          USE_INMEMORY=true npm run test:backup-restore

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backup-restore-inmemory-logs-${{ github.sha }}
          path: backend/backups/
          if-no-files-found: warn

  docker-builds:
    runs-on: ubuntu-latest
    needs: setup-and-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Restore buildx cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Check GHCR push secret
        id: ghcr_check
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          if [ -z "$GHCR_PAT" ]; then
            echo "GHCR_PAT not set — image push will be skipped. To enable pushing, add a personal access token (write:packages) to repository secrets as GHCR_PAT.";
            echo "push=false" >> $GITHUB_OUTPUT
          else
            echo "GHCR_PAT set — image push will be attempted.";
            echo "push=true" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        if: steps.ghcr_check.outputs.push == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ steps.ghcr_check.outputs.push == 'true' }}
          cache-from: |
            ${{ steps.ghcr_check.outputs.push == 'true' && format('type=registry,ref=ghcr.io/2024866732/hafjet-bukku-cache:buildx-{0}', github.ref_name) || '' }}
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            ${{ steps.ghcr_check.outputs.push == 'true' && format('type=registry,ref=ghcr.io/2024866732/hafjet-bukku-cache:buildx-{0},mode=max', github.ref_name) || '' }}
            type=local,dest=/tmp/.buildx-cache,mode=max
          tags: |
            ghcr.io/2024866732/hafjet-bukku-backend:${{ github.sha }}
            ghcr.io/2024866732/hafjet-bukku-backend:latest

      - name: Verify backend image is available
        if: steps.ghcr_check.outputs.push == 'true'
        run: |
          echo "Verifying backend image in GHCR..."
          docker pull ghcr.io/2024866732/hafjet-bukku-backend:latest
          DIGEST=$(docker image inspect ghcr.io/2024866732/hafjet-bukku-backend:latest --format '{{index .RepoDigests 0}}' || true)
          if [ -z "$DIGEST" ]; then echo "Backend image inspect failed" && exit 1; fi
          echo "Backend image: $DIGEST"
          echo "### Backend image" >> $GITHUB_STEP_SUMMARY
          echo "$DIGEST" >> $GITHUB_STEP_SUMMARY

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ steps.ghcr_check.outputs.push == 'true' }}
          cache-from: |
            ${{ steps.ghcr_check.outputs.push == 'true' && format('type=registry,ref=ghcr.io/2024866732/hafjet-bukku-cache:buildx-{0}', github.ref_name) || '' }}
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            ${{ steps.ghcr_check.outputs.push == 'true' && format('type=registry,ref=ghcr.io/2024866732/hafjet-bukku-cache:buildx-{0},mode=max', github.ref_name) || '' }}
            type=local,dest=/tmp/.buildx-cache,mode=max
          tags: |
            ghcr.io/2024866732/hafjet-bukku-frontend:${{ github.sha }}
            ghcr.io/2024866732/hafjet-bukku-frontend:latest

      - name: Verify frontend image is available
        if: steps.ghcr_check.outputs.push == 'true'
        run: |
          echo "Verifying frontend image in GHCR..."
          docker pull ghcr.io/2024866732/hafjet-bukku-frontend:latest
          DIGEST=$(docker image inspect ghcr.io/2024866732/hafjet-bukku-frontend:latest --format '{{index .RepoDigests 0}}' || true)
          if [ -z "$DIGEST" ]; then echo "Frontend image inspect failed" && exit 1; fi
          echo "Frontend image: $DIGEST"
          echo "### Frontend image" >> $GITHUB_STEP_SUMMARY
          echo "$DIGEST" >> $GITHUB_STEP_SUMMARY
