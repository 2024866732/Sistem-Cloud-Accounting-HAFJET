# =============================================================================
# CI/CD Deploy to Railway - Production Ready
# =============================================================================
# Workflow ini mengautomasikan build, test, dan deployment ke Railway.
# 
# ‚úÖ Tiada LocalStack - fokus Railway cloud deployment sahaja
# ‚úÖ Retry logic untuk deploy yang robust
# ‚úÖ Auto-detection Railway service dari project configuration
# ‚úÖ Health check validation selepas deploy (optional)
# ‚úÖ Diagnostics capture untuk troubleshooting
# ‚úÖ Manual trigger tersedia (workflow_dispatch)
#
# Required Secrets:
#   - RAILWAY_TOKEN: Railway authentication token (REQUIRED)
#   - RAILWAY_PROJECT: Railway project ID (OPTIONAL but recommended)
#   - RAILWAY_BACKEND_URL: Backend URL for health checks (OPTIONAL)
#
# Optional Secrets:
#   - RAILWAY_SERVICE: Specific service name (usually auto-detected)
#
# Setup Instructions:
#   1. Get RAILWAY_TOKEN from Railway dashboard > Project > Settings > Tokens
#   2. Add token to GitHub: Settings > Secrets > Actions > New secret
#   3. (Optional) Add RAILWAY_PROJECT for explicit project linking
#   4. (Optional) Add RAILWAY_BACKEND_URL for health check validation
#
# =============================================================================

name: CI/CD Deploy to Railway

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Build ‚Ä¢ Test ‚Ä¢ Deploy to Railway
    runs-on: ubuntu-latest
    
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT: ${{ secrets.RAILWAY_PROJECT }}
      RAILWAY_SERVICE: ${{ secrets.RAILWAY_SERVICE || 'hafjet-cloud-accounting' }}

    steps:
      # -------------------------------------------------------------------------
      # Step 1: Checkout kod dari repository
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------------------------------------------------------
      # Step 2: Setup Node.js environment (untuk frontend & backend)
      # -------------------------------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      # -------------------------------------------------------------------------
      # Step 3: Setup Python (jika backend menggunakan Python)
      # -------------------------------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # -------------------------------------------------------------------------
      # Step 4: Install Railway CLI
      # -------------------------------------------------------------------------
      - name: Install Railway CLI
        run: npm install -g @railway/cli

      # -------------------------------------------------------------------------
      # Step 5: Link Railway Project (if RAILWAY_PROJECT is set)
      # -------------------------------------------------------------------------
      - name: Link Railway Project
        if: env.RAILWAY_PROJECT != ''
        run: |
          echo "üîó Linking to Railway project: $RAILWAY_PROJECT"
          railway link $RAILWAY_PROJECT 2>/dev/null || echo "‚ö†Ô∏è Project already linked or link failed"
          railway status 2>/dev/null || echo "‚ö†Ô∏è Unable to fetch Railway status"

      # -------------------------------------------------------------------------
      # Step 5: Skip explicit login - Railway CLI uses RAILWAY_TOKEN env var
      # -------------------------------------------------------------------------
      # Railway CLI automatically authenticates using RAILWAY_TOKEN environment
      # variable set at job level, no explicit login needed

      # -------------------------------------------------------------------------
      # Step 6: Frontend - Install dependencies, run tests, build
      # -------------------------------------------------------------------------
      - name: Frontend - Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Frontend - Run tests
        working-directory: frontend
        run: npm test || echo "Frontend tests skipped or failed (non-blocking)"

      - name: Frontend - Build production bundle
        working-directory: frontend
        run: npm run build

      # -------------------------------------------------------------------------
      # Step 7: Backend - Install dependencies, run tests, build
      # -------------------------------------------------------------------------
      - name: Backend - Install dependencies
        working-directory: backend
        run: npm ci

      - name: Backend - Run tests
        working-directory: backend
        run: npm test || echo "Backend tests skipped or failed (non-blocking)"

      - name: Backend - Build (if applicable)
        working-directory: backend
        run: npm run build || echo "Backend build step skipped"

      # -------------------------------------------------------------------------
      # Step 8: Deploy ke Railway dengan retry logic
      # -------------------------------------------------------------------------
      - name: Deploy to Railway
        id: railway_deploy
        run: |
          set -euo pipefail
          
          echo "üöÄ Starting Railway deployment..."
          
          # Try different deployment methods - Railway CLI auto-detects service from project
          if railway up --detach 2>/dev/null; then
            echo "‚úÖ Deployment succeeded using 'railway up --detach'"
            echo "deploy_status=success" >> $GITHUB_OUTPUT
          elif railway deploy --detach 2>/dev/null; then
            echo "‚úÖ Deployment succeeded using 'railway deploy --detach'"
            echo "deploy_status=success" >> $GITHUB_OUTPUT
          elif [ -n "$RAILWAY_SERVICE" ] && railway up --service "$RAILWAY_SERVICE" --detach 2>/dev/null; then
            echo "‚úÖ Deployment succeeded using service-specific deployment"
            echo "deploy_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è First deployment attempt failed. Collecting logs..."
            railway logs --tail 100 2>/dev/null || echo "Unable to fetch logs"
            
            echo "üîÑ Retrying deployment..."
            if railway up --detach 2>/dev/null; then
              echo "‚úÖ Deployment succeeded on retry"
              echo "deploy_status=success" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Deployment failed after retry"
              echo "üí° Troubleshooting tips:"
              echo "  - Ensure RAILWAY_TOKEN is valid"
              echo "  - Check Railway project is properly linked"
              echo "  - Verify railway.json configuration exists"
              echo "  - Try: railway link <project-id>"
              echo "deploy_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      # -------------------------------------------------------------------------
      # Step 9: Health check untuk validate deployment
      # -------------------------------------------------------------------------
      - name: Verify deployment health
        if: steps.railway_deploy.outputs.deploy_status == 'success'
        run: |
          echo "‚è≥ Waiting for Railway services to stabilize..."
          sleep 30
          
          # Try to get deployment URL from Railway
          echo "üîç Checking Railway deployment status..."
          railway status 2>/dev/null || echo "Unable to fetch Railway status"
          
          # If RAILWAY_BACKEND_URL is set, use it for health check
          if [ -n "${{ secrets.RAILWAY_BACKEND_URL }}" ]; then
            HEALTH_URL="${{ secrets.RAILWAY_BACKEND_URL }}/api/health"
            MAX_ATTEMPTS=6
            SLEEP_SECONDS=10
            
            echo "üè• Running health checks against: $HEALTH_URL"
            
            for i in $(seq 1 $MAX_ATTEMPTS); do
              echo "Health check attempt $i/$MAX_ATTEMPTS..."
              
              if curl -sSf "$HEALTH_URL" -m 15; then
                echo "‚úÖ Health check passed!"
                exit 0
              fi
              
              if [ $i -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Waiting ${SLEEP_SECONDS}s before retry..."
                sleep $SLEEP_SECONDS
              fi
            done
            
            echo "‚ö†Ô∏è Health check failed after $MAX_ATTEMPTS attempts"
            echo "üìã Dumping Railway logs for debugging..."
            railway logs --tail 200 2>/dev/null || echo "Unable to fetch logs"
            echo "üí° Note: Service may still be starting. Check Railway dashboard."
          else
            echo "‚ö†Ô∏è RAILWAY_BACKEND_URL not configured - skipping health check"
            echo "üí° Add RAILWAY_BACKEND_URL secret to enable health checks"
            echo "   After first successful deployment, get URL from Railway dashboard"
          fi

      # -------------------------------------------------------------------------
      # Step 10: Success notification
      # -------------------------------------------------------------------------
      - name: Deployment success notification
        if: success()
        run: |
          echo "================================================"
          echo "‚úÖ DEPLOYMENT SUCCESSFUL"
          echo "================================================"
          echo "Commit: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          echo "================================================"

      # -------------------------------------------------------------------------
      # Step 11: Capture diagnostics jika failure
      # -------------------------------------------------------------------------
      - name: Capture diagnostics on failure
        if: failure()
        run: |
          echo "================================================"
          echo "‚ùå DEPLOYMENT FAILED - DIAGNOSTICS"
          echo "================================================"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Commit: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF"
          echo "Actor: $GITHUB_ACTOR"
          echo "Railway Project: $RAILWAY_PROJECT"
          echo "================================================"
          echo "üìã Railway Status:"
          railway status 2>/dev/null || echo "Unable to fetch Railway status"
          echo "================================================"
          echo "üìã Railway logs (last 500 lines):"
          railway logs --tail 500 2>/dev/null || echo "Unable to fetch logs"
          echo "================================================"
          echo "üí° Troubleshooting Steps:"
          echo "  1. Verify RAILWAY_TOKEN is valid and not expired"
          echo "  2. Check Railway dashboard: https://railway.app"
          echo "  3. Ensure Railway project exists and is accessible"
          echo "  4. Verify railway.json and nixpacks.toml configurations"
          echo "  5. Check if services are properly configured in Railway"
          echo "================================================"
