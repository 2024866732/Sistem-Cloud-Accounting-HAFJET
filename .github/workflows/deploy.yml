name: CI/CD Deploy to Railway

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build-test-deploy:
    name: Build, Test, Deploy (Railway)
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT: ${{ secrets.RAILWAY_PROJECT }}
      # Optional: add other secrets here (DB_URL, API_KEY, etc.)

    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js (primary runtime) - change version if needed
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Optional: Setup Python if your backend needs it
      - name: Setup Python (optional)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Cache node_modules for faster builds
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: frontend-${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-${{ runner.os }}-node-

      # Install dependencies and run tests for frontend
      - name: Install & Test Frontend
        if: ${{ always() }}
        working-directory: frontend
        run: |
          npm ci
          npm test --silent

      # Install dependencies and run tests for backend
      - name: Install & Test Backend
        if: ${{ always() }}
        working-directory: backend
        run: |
          npm ci
          npm test --silent

      # Build steps (adjust paths to your project)
      - name: Build Frontend
        working-directory: frontend
        run: |
          npm run build

      - name: Build Backend
        working-directory: backend
        run: |
          npm run build

      # Install Railway CLI
      - name: Install Railway CLI
        run: npm install -g railway

      # Railway login using token from secrets
      - name: Railway login
        run: |
          set -o pipefail
          echo "$RAILWAY_TOKEN" | railway login --token -

      # Deploy to Railway with a single retry on failure
      - name: Deploy to Railway (try once, retry on failure)
        id: railway_deploy
        run: |
          set -euo pipefail
          set +x
          # Try deploy, if fails capture output and retry once
          if railway up --project "$RAILWAY_PROJECT"; then
            echo "deploy_success=true" >> $GITHUB_OUTPUT
          else
            echo "First deploy attempt failed, collecting logs..."
            railway logs --project "$RAILWAY_PROJECT" --since 1h | sed -n '1,200p' || true
            echo "Retrying deploy..."
            if railway up --project "$RAILWAY_PROJECT"; then
              echo "deploy_success=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      # Verify deployment by hitting health endpoint; fail the job if it doesn't return 200
      - name: Verify deployment (health check)
        if: steps.railway_deploy.outputs.deploy_success == 'true'
        run: |
          # Update this URL to your Railway deployment URL or use dynamic lookup
          URL="https://sistem-cloud-accounting-hafjet-production.up.railway.app/api/health"
          for i in {1..6}; do
            echo "Checking health (attempt $i)..."
            if curl -sSf "$URL" -m 10; then
              echo "Health check passed"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed after retries"
          # Collect Railway logs for diagnostics
          railway logs --project "$RAILWAY_PROJECT" --since 1h | sed -n '1,500p' || true
          exit 1

      # Notify success
      - name: Deployment succeeded
        if: steps.railway_deploy.outputs.deploy_success == 'true' && success()
        run: echo "✅ Deployment to Railway succeeded"

      # On failure capture additional diagnostics (always runs on failure)
      - name: Capture diagnostics on failure
        if: failure()
        run: |
          echo "Collecting diagnostics..."
          echo "=== GitHub Actions Run Info ==="
          echo "Run: $GITHUB_RUN_ID" || true
          echo "Commit: $GITHUB_SHA" || true
          echo "Branch: $GITHUB_REF" || true
          echo "=== Railway Logs (last 1h) ==="
          railway logs --project "$RAILWAY_PROJECT" --since 1h | sed -n '1,800p' || true

    # End job

  # Optional job: deploy to AWS (commented) - keep for reference
  # deploy-aws:
  #   runs-on: ubuntu-latest
  #   needs: build-test-deploy
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Configure AWS creds
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
  #     - name: Deploy to S3
  #       run: |
  #         aws s3 cp frontend/dist/ s3://${{ secrets.S3_BUCKET }} --recursive
# CI/CD Deploy ke Railway App
# Perbezaan: LocalStack untuk dev/test local, Railway App untuk deploy cloud/live.

name: CI/CD Deploy

on:
  push:
    branches:
      - main # Hanya run bila ada push ke branch main
  # Allow manual re-run from Actions UI or via `gh workflow run`
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # Semua secrets diambil dari GitHub Actions Secret
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT: ${{ secrets.RAILWAY_PROJECT }} # Nama projek Railway anda
      # Tambah env lain jika perlu, contoh API_KEY, DB_URL, dsb.

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
        # Komen: Ambil semua kod dari repo

      # 2. Setup Node.js runtime (Railway CLI perlukan Node.js)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        # Komen: Node.js versi 18, tukar ikut keperluan projek

      # 3. Install Railway CLI secara global
      - name: Install Railway CLI
        run: npm install -g railway
        # Komen: Railway CLI untuk deploy ke Railway cloud

      # 4. Login Railway CLI dengan token dari secrets
      - name: Railway login
        run: railway login --token $RAILWAY_TOKEN
        # Komen: Autentikasi Railway CLI guna token rahsia

      # 5. Deploy app ke Railway
      - name: Deploy to Railway
        run: railway up --project $RAILWAY_PROJECT
        # Komen: Deploy kod/app ke Railway project

      # 6. Verify deployment (uji endpoint API selepas deploy)
      - name: Verify deployment
        run: |
          # Tunggu app ready (boleh adjust masa jika perlu)
          sleep 15
          # Uji endpoint API, tukar URL ikut app anda
          curl -sSf https://sistem-cloud-accounting-hafjet-production.up.railway.app/api/health || echo "Health check skipped or failed"
        # Komen: Uji endpoint /api/health, pastikan app running

      # 7. Inform success/failure
      - name: Deployment status
        if: ${{ success() }}
        run: echo "✅ Railway deployment successful!"
      - name: Deployment failed
        if: ${{ failure() }}
        run: echo "❌ Railway deployment failed!"
        # Komen: Workflow akan fail jika mana-mana step gagal

    # Untuk production AWS deploy, tukar step deploy:
    # - name: Setup AWS CLI
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    # - name: Deploy to AWS (contoh S3)
    #   run: aws s3 cp build/ s3://your-prod-bucket/ --recursive

# Contoh secrets yang perlu ada di GitHub Actions:
# - RAILWAY_TOKEN: Token Railway anda (dapatkan dari Railway dashboard)
# - RAILWAY_PROJECT: Nama projek Railway (186782e9-5c00-473e-8434-a5fdd3951711)
# - (Tambahan untuk production AWS: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)

# Cara tambah secrets:
# 1. Pergi ke Settings > Secrets and variables > Actions
# 2. Klik "New repository secret"
# 3. Masukkan nama dan value (contoh: RAILWAY_TOKEN, RAILWAY_PROJECT)

# Perbezaan Railway vs LocalStack:
# - Railway deploy ke cloud sebenar, sesuai untuk production/staging.
# - LocalStack hanya untuk local development, mock AWS services.
# - Railway CLI automasi deploy, scaling, dan env management.
# - LocalStack perlukan endpoint-url, Railway tidak.

# Workflow ini robust dan beginner-friendly untuk CI/CD cloud live ke Railway App!
